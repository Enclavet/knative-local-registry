apiVersion: batch/v1
kind: Job
metadata:
  name: registry-cert-cluster-ca
  namespace: registry
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      serviceAccount: cert-mgmt
      containers:
      - name: bash
        image: solsson/kubectl-cfssl@sha256:ef611e1ddb4126a3377a075f2e91986950a30e01d837d0a7f8d96de031c230d7
        command:
        - /bin/bash
        args:
        - -cex
        - |
          kubectl get secret registry-tls -o wide --ignore-not-found=true
          kubectl get csr registry-tls -o wide --ignore-not-found=true

          cat <<EOF | cfssl genkey - | cfssljson -bare server
          {
            "hosts": [
              "unauthenticated.registry.svc.cluster.local",
              "authenticated.registry.svc.cluster.local",
              "knative-local-registry"
            ],
            "CN": "registry.svc.cluster.local",
            "key": {
              "algo": "ecdsa",
              "size": 256
            }
          }
          EOF

          cat <<EOF | kubectl create -f -
          apiVersion: certificates.k8s.io/v1beta1
          kind: CertificateSigningRequest
          metadata:
            name: registry-tls
          spec:
            groups:
            - system:authenticated
            request: $(cat server.csr | base64 | tr -d '\n')
            usages:
            - digital signature
            - key encipherment
            - server auth
          EOF
          
          kubectl get csr registry-tls -o wide

          until [ "$(kubectl get csr registry-tls -o jsonpath='{.status.conditions[0].type}')" == 'Approved' ]; do
            echo "\n"
            echo "Waiting for someone/somebot to run:"
            echo "kubectl certificate approve registry-tls"
            sleep 10
          done

          kubectl get csr registry-tls -o jsonpath='{.status.certificate}' | base64 --decode > server.crt

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: registry-tls
            namespace: registry
          data:
            tls.crt: $(cat server.crt | base64 | tr -d '\n')
            tls.key: $(cat server-key.pem | base64 | tr -d '\n')
          EOF

          kubectl describe secret registry-tls || echo "\nFailed to create secret (RBAC issue probably)\n"
